#!/usr/bin/env bash

set -euo pipefail

source "$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/lib.sh"

ensure_root

export PATH="$HOME/.local/bin:$PATH"

if ! command -v uv >/dev/null 2>&1; then
  curl -LsSf https://astral.sh/uv/install.sh | sh
  export PATH="$HOME/.local/bin:$PATH"
fi

if [[ -d "$HOME/.local/bin" && -w /usr/local/bin ]]; then
  find "$HOME/.local/bin" -maxdepth 1 -type f -name 'uv*' -exec cp {} /usr/local/bin/ \;
fi

ensure_dir "$VOLUMES_ROOT"

for subdir in addons config scripts enterprise data opt cache ; do
  ensure_dir "$VOLUMES_ROOT/$subdir"
done

UV_BIN="$(command -v uv)"
VENV_PATH="${VENV_PATH:-$VOLUMES_ROOT/.venv}"

if [[ ! -d "$VENV_PATH" ]]; then
  log "Creating virtualenv at $VENV_PATH"
  "$UV_BIN" venv "$VENV_PATH"
fi

export VIRTUAL_ENV="$VENV_PATH"
export PATH="$VIRTUAL_ENV/bin:$PATH"

rsync -a --delete "$PROJECT_ROOT/addons/" "$VOLUMES_ROOT/addons/"
if [[ -d "$PROJECT_ROOT/docker/config" ]]; then
  rsync -a --delete "$PROJECT_ROOT/docker/config/" "$VOLUMES_ROOT/config/"
fi
if [[ -d "$PROJECT_ROOT/docker/scripts" ]]; then
  rsync -a --delete "$PROJECT_ROOT/docker/scripts/" "$VOLUMES_ROOT/scripts/"
fi
if [[ -f "$PROJECT_ROOT/pyproject.toml" ]]; then
  cp "$PROJECT_ROOT/pyproject.toml" "$VOLUMES_ROOT/pyproject.toml"
fi

if [[ -d "$VOLUMES_ROOT/scripts" ]]; then
  find "$VOLUMES_ROOT/scripts" -type f -name '*.sh' -exec chmod +x {} +
fi

ENTERPRISE_REPOSITORY="${ODOO_ENTERPRISE_REPOSITORY:-}"
ODOO_VERSION="${ODOO_VERSION:-18.0}"
ENTERPRISE_TARGET="$VOLUMES_ROOT/enterprise"

if [[ -n "$ENTERPRISE_REPOSITORY" ]]; then
  if [[ -n "${GITHUB_TOKEN:-}" ]]; then
    REMOTE_URL="https://${GITHUB_TOKEN}@github.com/${ENTERPRISE_REPOSITORY}"
    if [[ -d "$ENTERPRISE_TARGET/.git" ]]; then
      git -C "$ENTERPRISE_TARGET" fetch --depth 1 origin "$ODOO_VERSION"
      git -C "$ENTERPRISE_TARGET" reset --hard FETCH_HEAD
    else
      rm -rf "$ENTERPRISE_TARGET"
      git clone --branch "$ODOO_VERSION" --single-branch --depth 1 "$REMOTE_URL" "$ENTERPRISE_TARGET"
    fi
  else
    log "GITHUB_TOKEN missing; skipping enterprise clone"
  fi
fi

EXTRA_ROOT="$VOLUMES_ROOT/opt"
ensure_dir "$EXTRA_ROOT"
for folder in odoo-cleanup odoo-upgrade odoo-stubs; do
  ensure_dir "$EXTRA_ROOT/$folder"
done

"$UV_BIN" pip install --no-deps --target="$EXTRA_ROOT/odoo-cleanup" \
  odoo-addon-database-cleanup --extra-index-url https://wheelhouse.odoo-community.org/oca-simple/
"$UV_BIN" pip install --target="$EXTRA_ROOT/odoo-upgrade" git+https://github.com/odoo/upgrade-util
"$UV_BIN" pip install --target="$EXTRA_ROOT/odoo-stubs" git+https://github.com/odoo-ide/odoo-stubs@18.0

PYTHON_BIN="${PYTHON_BIN:-$VIRTUAL_ENV/bin/python}"
SITE_PACKAGES="$($PYTHON_BIN -c "import sysconfig; print(sysconfig.get_path('purelib'))")"
ensure_dir "$SITE_PACKAGES"

cat <<EOF >"$SITE_PACKAGES/odoo_local.pth"
/odoo
EOF

cat <<EOF >"$SITE_PACKAGES/odoo_enterprise.pth"
$VOLUMES_ROOT/enterprise
EOF

cat <<EOF >"$SITE_PACKAGES/upgrade_utils.pth"
$EXTRA_ROOT/odoo-upgrade
EOF

cat <<EOF >"$SITE_PACKAGES/database_cleanup.pth"
$EXTRA_ROOT/odoo-cleanup
EOF

cat <<EOF >"$SITE_PACKAGES/odoostubs.pth"
$EXTRA_ROOT/odoo-stubs
EOF

if [[ -x "$VOLUMES_ROOT/scripts/install_prod_requirements.sh" ]]; then
  "$VOLUMES_ROOT/scripts/install_prod_requirements.sh"
fi

if [[ "${COMPOSE_BUILD_TARGET:-development}" == "development" && -x "$VOLUMES_ROOT/scripts/install_dev_requirements.sh" ]]; then
  "$VOLUMES_ROOT/scripts/install_dev_requirements.sh"
fi

PATCH_TARGET="/odoo/odoo/addons/base/models/ir_ui_view.py"
PATCH_FILE="$PROJECT_ROOT/patches/fix_dev_mode_validation.patch"
if [[ -f "$PATCH_FILE" && -f "$PATCH_TARGET" ]]; then
  if ! grep -q "Skipping validation for unresolved stat button xmlid" "$PATCH_TARGET"; then
    (cd / && patch -p0 < "$PATCH_FILE")
  fi
fi

RUNTIME_ENV="$VOLUMES_ROOT/config/runtime-env.sh"
ensure_dir "$(dirname "$RUNTIME_ENV")"
{
  echo "# Generated by Codex Cloud setup"
  echo "# shellcheck disable=SC2148"
  printf 'export VOLUMES_ROOT=%q\n' "$VOLUMES_ROOT"
  printf 'export PROJECT_ROOT=%q\n' "$PROJECT_ROOT"
  printf 'export VIRTUAL_ENV=%q\n' "$VIRTUAL_ENV"
  printf 'export PATH=%q\n' "$VIRTUAL_ENV/bin:$PATH"
  printf 'export PYTHONPATH=%q\n' "$SITE_PACKAGES:${PYTHONPATH:-}"
  for var in \
    POSTGRES_PORT \
    ODOO_DB_HOST \
    ODOO_DB_PORT \
    ODOO_DB_NAME \
    ODOO_DB_USER \
    ODOO_DB_PASSWORD \
    ODOO_BASE_URL \
    ODOO_DEV_MODE \
    ODOO_UPDATE \
    ODOO_KEY \
    SHOPIFY_STORE_URL \
    SHOPIFY_STORE_URL_KEY \
    SHOPIFY_API_TOKEN \
    SHOPIFY_API_VERSION \
    SHOPIFY_WEBHOOK_KEY; do
    if [[ -n "${!var-}" ]]; then
      printf 'export %s=%q\n' "$var" "${!var}"
    fi
  done
} >"${RUNTIME_ENV}.tmp"
mv "${RUNTIME_ENV}.tmp" "$RUNTIME_ENV"
chmod 600 "$RUNTIME_ENV"
